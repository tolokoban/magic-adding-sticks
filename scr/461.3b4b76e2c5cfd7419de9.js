"use strict";(self.webpackChunk_=self.webpackChunk_||[]).push([[461],{1068:(n,e,s)=>{s.d(e,{A:()=>r});var t=s(1354),i=s.n(t),a=s(6314),o=s.n(a)()(i());o.push([n.id,".src-app-page-module_sticks_SzVZ4q {\n    display: flex;\n    justify-content: space-around;\n    align-items: stretch;\n    padding: 0;\n    margin: 0;\n}\n\n.src-app-page-module_page_VYwZn6 big > span {\n    display: inline-block;\n    padding: 0.125em 0.5em;\n    margin: 0 0.5em;\n    color: #000;\n    font-weight: bolder;\n    border-radius: 99vmin;\n}\n\n.src-app-page-module_page_VYwZn6 div {\n    text-align: center;\n}\n\n.src-app-page-module_page_VYwZn6 {\n    backdrop-filter: blur(2px);\n    background-color: #fffa;\n}\n\n.src-app-page-module_page_VYwZn6 footer {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n}\n","",{version:3,sources:["webpack://./src/app/page.module.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,6BAA6B;IAC7B,oBAAoB;IACpB,UAAU;IACV,SAAS;AACb;;AAEA;IACI,qBAAqB;IACrB,sBAAsB;IACtB,eAAe;IACf,WAAW;IACX,mBAAmB;IACnB,qBAAqB;AACzB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,0BAA0B;IAC1B,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,6BAA6B;IAC7B,mBAAmB;AACvB",sourcesContent:[".sticks {\n    display: flex;\n    justify-content: space-around;\n    align-items: stretch;\n    padding: 0;\n    margin: 0;\n}\n\n.page big > span {\n    display: inline-block;\n    padding: 0.125em 0.5em;\n    margin: 0 0.5em;\n    color: #000;\n    font-weight: bolder;\n    border-radius: 99vmin;\n}\n\n.page div {\n    text-align: center;\n}\n\n.page {\n    backdrop-filter: blur(2px);\n    background-color: #fffa;\n}\n\n.page footer {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n}\n"],sourceRoot:""}]),o.locals={sticks:"src-app-page-module_sticks_SzVZ4q",page:"src-app-page-module_page_VYwZn6"};const r=o},8883:(n,e,s)=>{s.d(e,{A:()=>r});var t=s(1354),i=s.n(t),a=s(6314),o=s.n(a)()(i());o.push([n.id,".src-components-Stick-Stick-module_stick_W892yP {\n    all: unset;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: stretch;\n    padding: 0;\n    gap: 0;\n    margin: 0 4px;\n    font-size: 200%;\n    cursor: pointer;\n    background-color: #444;\n    border: 1px solid #000;\n    box-shadow: 0 0.125em 0.25em #0007;\n}\n\n.src-components-Stick-Stick-module_stick_W892yP > div {\n    display: grid;\n    place-items: center;\n    width: 1.5em;\n    height: 1.5em;\n    padding: 0;\n    font-weight: bolder;\n}\n","",{version:3,sources:["webpack://./src/components/Stick/Stick.module.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,aAAa;IACb,sBAAsB;IACtB,2BAA2B;IAC3B,oBAAoB;IACpB,UAAU;IACV,MAAM;IACN,aAAa;IACb,eAAe;IACf,eAAe;IACf,sBAAsB;IACtB,sBAAsB;IACtB,kCAAkC;AACtC;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,YAAY;IACZ,aAAa;IACb,UAAU;IACV,mBAAmB;AACvB",sourcesContent:[".stick {\n    all: unset;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: stretch;\n    padding: 0;\n    gap: 0;\n    margin: 0 4px;\n    font-size: 200%;\n    cursor: pointer;\n    background-color: #444;\n    border: 1px solid #000;\n    box-shadow: 0 0.125em 0.25em #0007;\n}\n\n.stick > div {\n    display: grid;\n    place-items: center;\n    width: 1.5em;\n    height: 1.5em;\n    padding: 0;\n    font-weight: bolder;\n}\n"],sourceRoot:""}]),o.locals={stick:"src-components-Stick-Stick-module_stick_W892yP"};const r=o},9461:(n,e,s)=>{s.r(e),s.d(e,{default:()=>_});var t=s(4848),i=s(6540),a=s(8766),o=s(5072),r=s.n(o),A=s(7825),c=s.n(A),l=s(7659),d=s.n(l),p=s(5056),u=s.n(p),g=s(540),m=s.n(g),f=s(1113),C=s.n(f),B=s(1068),h={};h.styleTagTransform=C(),h.setAttributes=u(),h.insert=d().bind(null,"head"),h.domAPI=c(),h.insertStyleElement=m(),r()(B.A,h);const k=B.A&&B.A.locals?B.A.locals:void 0;var b=s(8883),I={};I.styleTagTransform=C(),I.setAttributes=u(),I.insert=d().bind(null,"head"),I.domAPI=c(),I.insertStyleElement=m(),r()(b.A,I);const x=b.A&&b.A.locals?b.A.locals:void 0,y=["#f90","#09f","#d8f","#9f0"];function v({className:n,value:e,onClick:s}){return(0,t.jsx)("button",{className:j(n,x.stick),onClick:s,children:e.map(((n,e)=>(0,t.jsx)("div",{style:{color:y[e]},children:n},e)))})}function j(...n){return n.filter((n=>"string"==typeof n)).join(" ")}function _(){const[n,e]=i.useState((()=>[w(),w(),w(),w()])),[s,o,r,A]=function([n,e,s,t]){return[1e3*n[0]+100*e[0]+10*s[0]+t[0],1e3*n[1]+100*e[1]+10*s[1]+t[1],1e3*n[2]+100*e[2]+10*s[2]+t[2],1e3*n[3]+100*e[3]+10*s[3]+t[3]]}(n),[c,l]=i.useState("guess");return(0,t.jsx)(a.sWC,{display:"grid",placeItems:"center",fullsize:!0,position:"absolute",fontSize:"3vh",className:k.page,children:(0,t.jsxs)(a.sWC,{display:"grid",gridTemplateRows:"1fr 2fr 2fr",gap:"S",padding:"S",children:[(0,t.jsx)("div",{children:(0,t.jsx)("p",{children:"Tap on the sticks below to randomly change their numbers."})}),(0,t.jsx)("div",{className:k.sticks,children:n.map(((s,i)=>(0,t.jsx)(v,{value:s,onClick:()=>(s=>{const t=[...n];t[s]=w(),e(t)})(i)},i)))}),(0,t.jsxs)("footer",{children:["guess"===c&&(0,t.jsx)("p",{children:"Try to guess the value of"}),(0,t.jsxs)("big",{children:[(0,t.jsx)("span",{style:{background:y[0]},children:s}),"+",(0,t.jsx)("span",{style:{background:y[1]},children:o}),"+",(0,t.jsx)("span",{style:{background:y[2]},children:r}),"+",(0,t.jsx)("span",{style:{background:y[3]},children:A}),"check"===c&&(0,t.jsxs)(t.Fragment,{children:["= ",(0,t.jsx)("big",{children:s+o+r+A})]})]}),"guess"===c&&(0,t.jsx)(a.yQN,{variant:"elevated",color:"neutral-9",onClick:()=>l("check"),children:"Tap to display the result"}),"check"===c&&(0,t.jsx)(a.yQN,{variant:"elevated",color:"neutral-9",onClick:()=>l("guess"),children:"Tap to hide the result"})]})]})})}function w(){const n=S(1,9),e=S(9-n,9);return[n,e,S(2,9),18-n-e]}function S(n,e){return n+Math.floor((e+1-n)*Math.random())}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFTLElBaENiLENBQUNLLElBQ2pCLE1BQU0wQixFQUFZLElBQUluQixHQUN0Qm1CLEVBQVUxQixHQUFTUyxJQUNuQkQsRUFBVWtCLEVBQVUsRUE2QmVDLENBQVkzQixJQUZ0QkEsUUFNakIsVUFBQyxVQUNJLFVBQVMsVUFBVGUsSUFBb0IsU0FBQyxLQUFFLHdDQUN4QixVQUFDLE9BQ0csb0JBQUMsUUFBS2QsTUFBTyxDQUFFMkIsV0FBWXJDLEVBQU8sSUFBTyxTQUFBbUIsSUFBUyxLQUNsRCxTQUFDLFFBQUtULE1BQU8sQ0FBRTJCLFdBQVlyQyxFQUFPLElBQU8sU0FBQW9CLElBQVMsS0FDbEQsU0FBQyxRQUFLVixNQUFPLENBQUUyQixXQUFZckMsRUFBTyxJQUFPLFNBQUFxQixJQUFTLEtBQ2xELFNBQUMsUUFBS1gsTUFBTyxDQUFFMkIsV0FBWXJDLEVBQU8sSUFBTyxTQUFBc0IsSUFDL0IsVUFBVEUsSUFDRyxzQkFBRSxnQkFDSSxTQUFDLE9BQUssU0FBQUwsRUFBSUMsRUFBSUMsRUFBSUMsVUFJdEIsVUFBVEUsSUFDRyxTQUFDLE9BQ0djLFFBQVEsV0FDUjNCLE1BQU0sWUFDTlAsUUFBUyxJQUFNcUIsRUFBUSxTQUMxQix1Q0FJSyxVQUFURCxJQUNHLFNBQUMsT0FDR2MsUUFBUSxXQUNSM0IsTUFBTSxZQUNOUCxRQUFTLElBQU1xQixFQUFRLFNBQzFCLDJDQVF6QixDQUVBLFNBQVNQLElBQ0wsTUFBTUMsRUFBSW9CLEVBQUksRUFBRyxHQUNYbkIsRUFBSW1CLEVBQUksRUFBSXBCLEVBQUcsR0FHckIsTUFBTyxDQUFDQSxFQUFHQyxFQUZEbUIsRUFBSSxFQUFHLEdBQ1AsR0FBS3BCLEVBQUlDLEVBRXZCLENBRUEsU0FBU21CLEVBQUlDLEVBQWFDLEdBQ3RCLE9BQU9ELEVBQU1FLEtBQUtDLE9BQU9GLEVBQU0sRUFBSUQsR0FBT0UsS0FBS0UsU0FDbkQsQyIsInNvdXJjZXMiOlsiL2hvbWUvdG9sb2tvYmFuL0NvZGUvZ2l0aHViL2dhbWUvZ2FtZXMvbWFnaWMvbWFnaWMtYWRkaW5nLXN0aWNrcy9zcmMvYXBwL3BhZ2UubW9kdWxlLmNzcyIsIi9ob21lL3RvbG9rb2Jhbi9Db2RlL2dpdGh1Yi9nYW1lL2dhbWVzL21hZ2ljL21hZ2ljLWFkZGluZy1zdGlja3Mvc3JjL2NvbXBvbmVudHMvU3RpY2svU3RpY2subW9kdWxlLmNzcyIsIndlYnBhY2s6Ly8uLi4vLi9zcmMvYXBwL3BhZ2UubW9kdWxlLmNzcz9hNjdiIiwid2VicGFjazovLy4uLi8uL3NyYy9jb21wb25lbnRzL1N0aWNrL1N0aWNrLm1vZHVsZS5jc3M/ZjEyNiIsIi9ob21lL3RvbG9rb2Jhbi9Db2RlL2dpdGh1Yi9nYW1lL2dhbWVzL21hZ2ljL21hZ2ljLWFkZGluZy1zdGlja3Mvc3JjL2NvbnN0YW50cy50cyIsIi9ob21lL3RvbG9rb2Jhbi9Db2RlL2dpdGh1Yi9nYW1lL2dhbWVzL21hZ2ljL21hZ2ljLWFkZGluZy1zdGlja3Mvc3JjL2NvbXBvbmVudHMvU3RpY2svU3RpY2sudHN4IiwiL2hvbWUvdG9sb2tvYmFuL0NvZGUvZ2l0aHViL2dhbWUvZ2FtZXMvbWFnaWMvbWFnaWMtYWRkaW5nLXN0aWNrcy9zcmMvYXBwL3BhZ2UudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuc3JjLWFwcC1wYWdlLW1vZHVsZV9zdGlja3NfU3pWWjRxIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xuICAgIGFsaWduLWl0ZW1zOiBzdHJldGNoO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luOiAwO1xufVxuXG4uc3JjLWFwcC1wYWdlLW1vZHVsZV9wYWdlX1ZZd1puNiBiaWcgPiBzcGFuIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgcGFkZGluZzogMC4xMjVlbSAwLjVlbTtcbiAgICBtYXJnaW46IDAgMC41ZW07XG4gICAgY29sb3I6ICMwMDA7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGRlcjtcbiAgICBib3JkZXItcmFkaXVzOiA5OXZtaW47XG59XG5cbi5zcmMtYXBwLXBhZ2UtbW9kdWxlX3BhZ2VfVll3Wm42IGRpdiB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuXG4uc3JjLWFwcC1wYWdlLW1vZHVsZV9wYWdlX1ZZd1puNiB7XG4gICAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDJweCk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmE7XG59XG5cbi5zcmMtYXBwLXBhZ2UtbW9kdWxlX3BhZ2VfVll3Wm42IGZvb3RlciB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZS5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksYUFBYTtJQUNiLDZCQUE2QjtJQUM3QixvQkFBb0I7SUFDcEIsVUFBVTtJQUNWLFNBQVM7QUFDYjs7QUFFQTtJQUNJLHFCQUFxQjtJQUNyQixzQkFBc0I7SUFDdEIsZUFBZTtJQUNmLFdBQVc7SUFDWCxtQkFBbUI7SUFDbkIscUJBQXFCO0FBQ3pCOztBQUVBO0lBQ0ksa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksMEJBQTBCO0lBQzFCLHVCQUF1QjtBQUMzQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIsNkJBQTZCO0lBQzdCLG1CQUFtQjtBQUN2QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuc3RpY2tzIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxuICAgIGFsaWduLWl0ZW1zOiBzdHJldGNoO1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICBtYXJnaW46IDA7XFxufVxcblxcbi5wYWdlIGJpZyA+IHNwYW4ge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgIHBhZGRpbmc6IDAuMTI1ZW0gMC41ZW07XFxuICAgIG1hcmdpbjogMCAwLjVlbTtcXG4gICAgY29sb3I6ICMwMDA7XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkZXI7XFxuICAgIGJvcmRlci1yYWRpdXM6IDk5dm1pbjtcXG59XFxuXFxuLnBhZ2UgZGl2IHtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4ucGFnZSB7XFxuICAgIGJhY2tkcm9wLWZpbHRlcjogYmx1cigycHgpO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmYTtcXG59XFxuXFxuLnBhZ2UgZm9vdGVyIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcInN0aWNrc1wiOiBgc3JjLWFwcC1wYWdlLW1vZHVsZV9zdGlja3NfU3pWWjRxYCxcblx0XCJwYWdlXCI6IGBzcmMtYXBwLXBhZ2UtbW9kdWxlX3BhZ2VfVll3Wm42YFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5zcmMtY29tcG9uZW50cy1TdGljay1TdGljay1tb2R1bGVfc3RpY2tfVzg5MnlQIHtcbiAgICBhbGw6IHVuc2V0O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gICAgYWxpZ24taXRlbXM6IHN0cmV0Y2g7XG4gICAgcGFkZGluZzogMDtcbiAgICBnYXA6IDA7XG4gICAgbWFyZ2luOiAwIDRweDtcbiAgICBmb250LXNpemU6IDIwMCU7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICM0NDQ7XG4gICAgYm9yZGVyOiAxcHggc29saWQgIzAwMDtcbiAgICBib3gtc2hhZG93OiAwIDAuMTI1ZW0gMC4yNWVtICMwMDA3O1xufVxuXG4uc3JjLWNvbXBvbmVudHMtU3RpY2stU3RpY2stbW9kdWxlX3N0aWNrX1c4OTJ5UCA+IGRpdiB7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBwbGFjZS1pdGVtczogY2VudGVyO1xuICAgIHdpZHRoOiAxLjVlbTtcbiAgICBoZWlnaHQ6IDEuNWVtO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGRlcjtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvU3RpY2svU3RpY2subW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLFVBQVU7SUFDVixhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLDJCQUEyQjtJQUMzQixvQkFBb0I7SUFDcEIsVUFBVTtJQUNWLE1BQU07SUFDTixhQUFhO0lBQ2IsZUFBZTtJQUNmLGVBQWU7SUFDZixzQkFBc0I7SUFDdEIsc0JBQXNCO0lBQ3RCLGtDQUFrQztBQUN0Qzs7QUFFQTtJQUNJLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIsWUFBWTtJQUNaLGFBQWE7SUFDYixVQUFVO0lBQ1YsbUJBQW1CO0FBQ3ZCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5zdGljayB7XFxuICAgIGFsbDogdW5zZXQ7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXG4gICAgYWxpZ24taXRlbXM6IHN0cmV0Y2g7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIGdhcDogMDtcXG4gICAgbWFyZ2luOiAwIDRweDtcXG4gICAgZm9udC1zaXplOiAyMDAlO1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM0NDQ7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICMwMDA7XFxuICAgIGJveC1zaGFkb3c6IDAgMC4xMjVlbSAwLjI1ZW0gIzAwMDc7XFxufVxcblxcbi5zdGljayA+IGRpdiB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIHBsYWNlLWl0ZW1zOiBjZW50ZXI7XFxuICAgIHdpZHRoOiAxLjVlbTtcXG4gICAgaGVpZ2h0OiAxLjVlbTtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGRlcjtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwic3RpY2tcIjogYHNyYy1jb21wb25lbnRzLVN0aWNrLVN0aWNrLW1vZHVsZV9zdGlja19XODkyeVBgXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzZdLnVzZVsxXSEuL3BhZ2UubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzZdLnVzZVsxXSEuL3BhZ2UubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbNl0udXNlWzFdIS4vU3RpY2subW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzZdLnVzZVsxXSEuL1N0aWNrLm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJleHBvcnQgY29uc3QgY29sb3JzID0gW1wiI2Y5MFwiLCBcIiMwOWZcIiwgXCIjZDhmXCIsIFwiIzlmMFwiXVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiXG5cbmltcG9ydCBzdHlsZXMgZnJvbSBcIi4vU3RpY2subW9kdWxlLmNzc1wiXG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tIFwiQC9jb25zdGFudHNcIlxuXG5leHBvcnQgaW50ZXJmYWNlIFN0aWNrUHJvcHMge1xuICAgIGNsYXNzTmFtZT86IHN0cmluZ1xuICAgIHZhbHVlOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXVxuICAgIG9uQ2xpY2soKTogdm9pZFxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTdGljayh7IGNsYXNzTmFtZSwgdmFsdWUsIG9uQ2xpY2sgfTogU3RpY2tQcm9wcykge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxidXR0b24gY2xhc3NOYW1lPXtqb2luKGNsYXNzTmFtZSwgc3R5bGVzLnN0aWNrKX0gb25DbGljaz17b25DbGlja30+XG4gICAgICAgICAgICB7dmFsdWUubWFwKChkaWdpdCwgaW5kZXgpID0+IChcbiAgICAgICAgICAgICAgICA8ZGl2IGtleT17aW5kZXh9IHN0eWxlPXt7IGNvbG9yOiBjb2xvcnNbaW5kZXhdIH19PlxuICAgICAgICAgICAgICAgICAgICB7ZGlnaXR9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgPC9idXR0b24+XG4gICAgKVxufVxuXG5mdW5jdGlvbiBqb2luKC4uLmNsYXNzZXM6IHVua25vd25bXSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGNsYXNzZXMuZmlsdGVyKChjbHMpID0+IHR5cGVvZiBjbHMgPT09IFwic3RyaW5nXCIpLmpvaW4oXCIgXCIpXG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IFZpZXdCdXR0b24sIFZpZXdQYW5lbCB9IGZyb20gXCJAdG9sb2tvYmFuL3VpXCJcblxuaW1wb3J0IHN0eWxlcyBmcm9tIFwiLi9wYWdlLm1vZHVsZS5jc3NcIlxuaW1wb3J0IFN0aWNrIGZyb20gXCJAL2NvbXBvbmVudHMvU3RpY2tcIlxuaW1wb3J0IHsgY29sb3JzIH0gZnJvbSBcIkAvY29uc3RhbnRzXCJcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUGFnZSgpIHtcbiAgICBjb25zdCBbc3RpY2tzLCBzZXRTdGlja3NdID0gUmVhY3QudXNlU3RhdGUoKCkgPT4gW1xuICAgICAgICBtYWtlU3RpY2soKSxcbiAgICAgICAgbWFrZVN0aWNrKCksXG4gICAgICAgIG1ha2VTdGljaygpLFxuICAgICAgICBtYWtlU3RpY2soKSxcbiAgICBdKVxuICAgIGNvbnN0IFthLCBiLCBjLCBkXSA9IGdldE51bWJlcnNUb0FkZEZyb21TdGlja3Moc3RpY2tzKVxuICAgIGNvbnN0IFttb2RlLCBzZXRNb2RlXSA9IFJlYWN0LnVzZVN0YXRlPFwiZ3Vlc3NcIiB8IFwiY2hlY2tcIj4oXCJndWVzc1wiKVxuICAgIGNvbnN0IHVwZGF0ZVN0aWNrID0gKGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgY29uc3QgbmV3U3RpY2tzID0gWy4uLnN0aWNrc11cbiAgICAgICAgbmV3U3RpY2tzW2luZGV4XSA9IG1ha2VTdGljaygpXG4gICAgICAgIHNldFN0aWNrcyhuZXdTdGlja3MpXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPFZpZXdQYW5lbFxuICAgICAgICAgICAgZGlzcGxheT1cImdyaWRcIlxuICAgICAgICAgICAgcGxhY2VJdGVtcz1cImNlbnRlclwiXG4gICAgICAgICAgICBmdWxsc2l6ZVxuICAgICAgICAgICAgcG9zaXRpb249XCJhYnNvbHV0ZVwiXG4gICAgICAgICAgICBmb250U2l6ZT1cIjN2aFwiXG4gICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5wYWdlfVxuICAgICAgICA+XG4gICAgICAgICAgICA8Vmlld1BhbmVsXG4gICAgICAgICAgICAgICAgZGlzcGxheT1cImdyaWRcIlxuICAgICAgICAgICAgICAgIGdyaWRUZW1wbGF0ZVJvd3M9XCIxZnIgMmZyIDJmclwiXG4gICAgICAgICAgICAgICAgZ2FwPVwiU1wiXG4gICAgICAgICAgICAgICAgcGFkZGluZz1cIlNcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgVGFwIG9uIHRoZSBzdGlja3MgYmVsb3cgdG8gcmFuZG9tbHkgY2hhbmdlIHRoZWlyXG4gICAgICAgICAgICAgICAgICAgICAgICBudW1iZXJzLlxuICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5zdGlja3N9PlxuICAgICAgICAgICAgICAgICAgICB7c3RpY2tzLm1hcCgoc3RpY2ssIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8U3RpY2tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2luZGV4fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtzdGlja31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB1cGRhdGVTdGljayhpbmRleCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8Zm9vdGVyPlxuICAgICAgICAgICAgICAgICAgICB7bW9kZSA9PT0gXCJndWVzc1wiICYmIDxwPlRyeSB0byBndWVzcyB0aGUgdmFsdWUgb2Y8L3A+fVxuICAgICAgICAgICAgICAgICAgICA8YmlnPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9e3sgYmFja2dyb3VuZDogY29sb3JzWzBdIH19PnthfTwvc3Bhbj4rXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT17eyBiYWNrZ3JvdW5kOiBjb2xvcnNbMV0gfX0+e2J9PC9zcGFuPitcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPXt7IGJhY2tncm91bmQ6IGNvbG9yc1syXSB9fT57Y308L3NwYW4+K1xuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9e3sgYmFja2dyb3VuZDogY29sb3JzWzNdIH19PntkfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHttb2RlID09PSBcImNoZWNrXCIgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gPGJpZz57YSArIGIgKyBjICsgZH08L2JpZz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgIDwvYmlnPlxuICAgICAgICAgICAgICAgICAgICB7bW9kZSA9PT0gXCJndWVzc1wiICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxWaWV3QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cImVsZXZhdGVkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj1cIm5ldXRyYWwtOVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0TW9kZShcImNoZWNrXCIpfVxuICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRhcCB0byBkaXNwbGF5IHRoZSByZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVmlld0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAge21vZGUgPT09IFwiY2hlY2tcIiAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8Vmlld0J1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJlbGV2YXRlZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9XCJuZXV0cmFsLTlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldE1vZGUoXCJndWVzc1wiKX1cbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUYXAgdG8gaGlkZSB0aGUgcmVzdWx0XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1ZpZXdCdXR0b24+XG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgPC9mb290ZXI+XG4gICAgICAgICAgICA8L1ZpZXdQYW5lbD5cbiAgICAgICAgPC9WaWV3UGFuZWw+XG4gICAgKVxufVxuXG5mdW5jdGlvbiBtYWtlU3RpY2soKTogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl0ge1xuICAgIGNvbnN0IGEgPSBybmQoMSwgOSlcbiAgICBjb25zdCBiID0gcm5kKDkgLSBhLCA5KVxuICAgIGNvbnN0IGMgPSBybmQoMiwgOSlcbiAgICBjb25zdCBkID0gMTggLSBhIC0gYlxuICAgIHJldHVybiBbYSwgYiwgYywgZF1cbn1cblxuZnVuY3Rpb24gcm5kKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcikge1xuICAgIHJldHVybiBtaW4gKyBNYXRoLmZsb29yKChtYXggKyAxIC0gbWluKSAqIE1hdGgucmFuZG9tKCkpXG59XG5cbmZ1bmN0aW9uIGdldE51bWJlcnNUb0FkZEZyb21TdGlja3MoW2EsIGIsIGMsIGRdOiBbXG4gICAgbnVtYmVyLFxuICAgIG51bWJlcixcbiAgICBudW1iZXIsXG4gICAgbnVtYmVyLFxuXVtdKTogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl0ge1xuICAgIHJldHVybiBbXG4gICAgICAgIDEwMDAgKiBhWzBdICsgMTAwICogYlswXSArIDEwICogY1swXSArIGRbMF0sXG4gICAgICAgIDEwMDAgKiBhWzFdICsgMTAwICogYlsxXSArIDEwICogY1sxXSArIGRbMV0sXG4gICAgICAgIDEwMDAgKiBhWzJdICsgMTAwICogYlsyXSArIDEwICogY1syXSArIGRbMl0sXG4gICAgICAgIDEwMDAgKiBhWzNdICsgMTAwICogYlszXSArIDEwICogY1szXSArIGRbM10sXG4gICAgXVxufVxuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwibG9jYWxzIiwib3B0aW9ucyIsInN0eWxlVGFnVHJhbnNmb3JtIiwic2V0QXR0cmlidXRlcyIsImluc2VydCIsImRvbUFQSSIsImluc2VydFN0eWxlRWxlbWVudCIsInVuZGVmaW5lZCIsImNvbG9ycyIsIlN0aWNrIiwiY2xhc3NOYW1lIiwidmFsdWUiLCJvbkNsaWNrIiwiam9pbiIsInN0aWNrIiwibWFwIiwiZGlnaXQiLCJpbmRleCIsInN0eWxlIiwiY29sb3IiLCJjbGFzc2VzIiwiZmlsdGVyIiwiY2xzIiwiUGFnZSIsInN0aWNrcyIsInNldFN0aWNrcyIsIm1ha2VTdGljayIsImEiLCJiIiwiYyIsImQiLCJnZXROdW1iZXJzVG9BZGRGcm9tU3RpY2tzIiwibW9kZSIsInNldE1vZGUiLCJkaXNwbGF5IiwicGxhY2VJdGVtcyIsImZ1bGxzaXplIiwicG9zaXRpb24iLCJmb250U2l6ZSIsInBhZ2UiLCJncmlkVGVtcGxhdGVSb3dzIiwiZ2FwIiwicGFkZGluZyIsIm5ld1N0aWNrcyIsInVwZGF0ZVN0aWNrIiwiYmFja2dyb3VuZCIsInZhcmlhbnQiLCJybmQiLCJtaW4iLCJtYXgiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iXSwic291cmNlUm9vdCI6IiJ9