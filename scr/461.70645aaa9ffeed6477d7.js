"use strict";(self.webpackChunk_=self.webpackChunk_||[]).push([[461],{1068:(n,e,s)=>{s.d(e,{A:()=>r});var t=s(1354),o=s.n(t),a=s(6314),i=s.n(a)()(o());i.push([n.id,".src-app-page-module_sticks_SzVZ4q {\n    display: flex;\n    justify-content: space-around;\n    align-items: stretch;\n    padding: 0;\n    margin: 0;\n}\n\n.src-app-page-module_page_VYwZn6 big > span {\n    display: inline-block;\n    padding: 0.125em 0.5em;\n    margin: 0 0.5em;\n    color: #000;\n    font-weight: bolder;\n    border-radius: 99vmin;\n}\n\n.src-app-page-module_page_VYwZn6 div {\n    text-align: center;\n}\n\n.src-app-page-module_page_VYwZn6 {\n    backdrop-filter: blur(2px);\n    background-color: #fffa;\n}\n\n.src-app-page-module_page_VYwZn6 footer {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n}\n\n.src-app-page-module_plus_RWOUpr {\n    all: unset;\n    cursor: pointer;\n    font-size: 3rem;\n    width: 1.2em;\n    height: 1.2em;\n    border-radius: 100vmax;\n    background-color: #fff;\n    color: #000;\n    /* border: 1px solid #0008; */\n    box-shadow: 0 0.125em 0.25em #000b;\n}\n","",{version:3,sources:["webpack://./src/app/page.module.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,6BAA6B;IAC7B,oBAAoB;IACpB,UAAU;IACV,SAAS;AACb;;AAEA;IACI,qBAAqB;IACrB,sBAAsB;IACtB,eAAe;IACf,WAAW;IACX,mBAAmB;IACnB,qBAAqB;AACzB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,0BAA0B;IAC1B,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,6BAA6B;IAC7B,mBAAmB;AACvB;;AAEA;IACI,UAAU;IACV,eAAe;IACf,eAAe;IACf,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,sBAAsB;IACtB,WAAW;IACX,6BAA6B;IAC7B,kCAAkC;AACtC",sourcesContent:[".sticks {\n    display: flex;\n    justify-content: space-around;\n    align-items: stretch;\n    padding: 0;\n    margin: 0;\n}\n\n.page big > span {\n    display: inline-block;\n    padding: 0.125em 0.5em;\n    margin: 0 0.5em;\n    color: #000;\n    font-weight: bolder;\n    border-radius: 99vmin;\n}\n\n.page div {\n    text-align: center;\n}\n\n.page {\n    backdrop-filter: blur(2px);\n    background-color: #fffa;\n}\n\n.page footer {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n}\n\n.plus {\n    all: unset;\n    cursor: pointer;\n    font-size: 3rem;\n    width: 1.2em;\n    height: 1.2em;\n    border-radius: 100vmax;\n    background-color: #fff;\n    color: #000;\n    /* border: 1px solid #0008; */\n    box-shadow: 0 0.125em 0.25em #000b;\n}\n"],sourceRoot:""}]),i.locals={sticks:"src-app-page-module_sticks_SzVZ4q",page:"src-app-page-module_page_VYwZn6",plus:"src-app-page-module_plus_RWOUpr"};const r=i},8883:(n,e,s)=>{s.d(e,{A:()=>r});var t=s(1354),o=s.n(t),a=s(6314),i=s.n(a)()(o());i.push([n.id,".src-components-Stick-Stick-module_stick_W892yP {\n    all: unset;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: stretch;\n    padding: 0;\n    gap: 0;\n    margin: 0 4px;\n    font-size: 200%;\n    cursor: pointer;\n    background-color: #444;\n    border: 1px solid #000;\n    box-shadow: 0 0.125em 0.25em #0007;\n}\n\n.src-components-Stick-Stick-module_stick_W892yP > div {\n    display: grid;\n    place-items: center;\n    width: 1.5em;\n    height: 1.5em;\n    padding: 0;\n    font-weight: bolder;\n}\n","",{version:3,sources:["webpack://./src/components/Stick/Stick.module.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,aAAa;IACb,sBAAsB;IACtB,2BAA2B;IAC3B,oBAAoB;IACpB,UAAU;IACV,MAAM;IACN,aAAa;IACb,eAAe;IACf,eAAe;IACf,sBAAsB;IACtB,sBAAsB;IACtB,kCAAkC;AACtC;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,YAAY;IACZ,aAAa;IACb,UAAU;IACV,mBAAmB;AACvB",sourcesContent:[".stick {\n    all: unset;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: stretch;\n    padding: 0;\n    gap: 0;\n    margin: 0 4px;\n    font-size: 200%;\n    cursor: pointer;\n    background-color: #444;\n    border: 1px solid #000;\n    box-shadow: 0 0.125em 0.25em #0007;\n}\n\n.stick > div {\n    display: grid;\n    place-items: center;\n    width: 1.5em;\n    height: 1.5em;\n    padding: 0;\n    font-weight: bolder;\n}\n"],sourceRoot:""}]),i.locals={stick:"src-components-Stick-Stick-module_stick_W892yP"};const r=i},9461:(n,e,s)=>{s.r(e),s.d(e,{default:()=>_});var t=s(4848),o=s(6540),a=s(8766),i=s(5072),r=s.n(i),A=s(7825),l=s.n(A),c=s(7659),d=s.n(c),p=s(5056),u=s.n(p),m=s(540),g=s.n(m),f=s(1113),C=s.n(f),B=s(1068),h={};h.styleTagTransform=C(),h.setAttributes=u(),h.insert=d().bind(null,"head"),h.domAPI=l(),h.insertStyleElement=g(),r()(B.A,h);const b=B.A&&B.A.locals?B.A.locals:void 0;var I=s(8883),k={};k.styleTagTransform=C(),k.setAttributes=u(),k.insert=d().bind(null,"head"),k.domAPI=l(),k.insertStyleElement=g(),r()(I.A,k);const x=I.A&&I.A.locals?I.A.locals:void 0,y=["#f90","#09f","#d8f","#9f0"];function v({className:n,value:e,onClick:s}){return(0,t.jsx)("button",{className:j(n,x.stick),onClick:s,children:e.map(((n,e)=>(0,t.jsx)("div",{style:{color:y[e]},children:n},e)))})}function j(...n){return n.filter((n=>"string"==typeof n)).join(" ")}function _(){const[n,e]=o.useState(1),[s,i]=o.useState((()=>[w(),w(),w(),w()])),[r,A,l,c]=function(n,e){const s=[0,0,0,0];return n.slice(0,e).forEach((n=>{for(let e=0;e<4;e++)s[e]=10*s[e]+n[e]})),s}(s,n),[d,p]=o.useState("guess");return(0,t.jsx)(a.sWC,{display:"grid",placeItems:"center",fullsize:!0,position:"absolute",fontSize:"3vh",className:b.page,children:(0,t.jsxs)(a.sWC,{display:"grid",gridTemplateRows:"1fr 2fr 2fr",gap:"S",padding:"S",children:[(0,t.jsx)("div",{children:(0,t.jsx)("p",{children:"Tap on the sticks below to randomly change their numbers."})}),(0,t.jsxs)("div",{className:b.sticks,children:[s.slice(0,n).map(((n,e)=>(0,t.jsx)(v,{value:n,onClick:()=>(n=>{const e=[...s];e[n]=w(),i(e)})(e)},e))),n<4&&(0,t.jsx)("button",{type:"button",className:b.plus,onClick:()=>e(n+1),children:"+"})]}),(0,t.jsxs)("footer",{children:["guess"===d&&(0,t.jsx)("p",{children:"Try to guess the value of"}),(0,t.jsxs)("big",{children:[(0,t.jsx)("span",{style:{background:y[0]},children:r}),"+",(0,t.jsx)("span",{style:{background:y[1]},children:A}),"+",(0,t.jsx)("span",{style:{background:y[2]},children:l}),"+",(0,t.jsx)("span",{style:{background:y[3]},children:c}),"check"===d&&(0,t.jsxs)(t.Fragment,{children:["= ",(0,t.jsx)("big",{children:r+A+l+c})]})]}),(0,t.jsxs)(a.sWC,{fullwidth:!0,display:"flex",justifyContent:"space-around",alignItems:"center",children:["guess"===d&&(0,t.jsx)(a.yQN,{variant:"elevated",color:"neutral-9",onClick:()=>p("check"),children:"Show"}),"check"===d&&(0,t.jsx)(a.yQN,{variant:"elevated",color:"neutral-9",onClick:()=>p("guess"),children:"Hide"})," ",(0,t.jsx)(a.yQN,{variant:"elevated",color:"neutral-9",enabled:n>1,onClick:()=>e(1),children:"Reset"})]})]})]})})}function w(){const n=S(1,9),e=S(9-n,9);return[n,e,S(2,9),18-n-e]}function S(n,e){return n+Math.floor((e+1-n)*Math.random())}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,